#Область ОбработчикиФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Проверить выполнение отложенных обработчиков
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	БухгалтерскиеОперацииСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Элементы.БухгалтерскаяОперация);

	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ОбщегоНазначенияБГУ.ПриСозданииНаСервере(ЭтотОбъект, Объект);

	ПРГ_СформироватьТаблицу();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	  // СтандартныеПодсистемы.ПодключаемыеКоманды
	  ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	  // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	  БухгалтерскиеОперацииСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, Элементы.БухгалтерскаяОперация);

	  ОбщегоНазначенияБГУ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

  КонецПроцедуры

  &НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	БухгалтерскиеОперацииСервер.ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);

	ОбщегоНазначенияБГУ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи,Отказ);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// Типовые операции и дополнительные табличные части
	БухгалтерскиеОперацииСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец Типовые операции и дополнительные табличные части
	ОбщегоНазначенияБГУ.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПРГ_ЗаполнитьДопКолонки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПРГ_ЗаполнитьДопКолонки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Документ.ПРГ_ИтоговыйРасчётПоДепозитам.Форма.ФормаПодбораКонтрагентовДоговоров" Тогда
		ОбработкаВыбораПодбораКонтрагентовСервер(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область КомандыФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);

КонецПроцедуры

&Вместо("СоответствияКВР_КОСГУ")
// Прогтехника, Гладилин К.В., 2020.11.06 - задача FED-3013{{
// добавлен параметр функции Контрагент
//}} Прогтехника, Гладилин К.В.
Функция ПРГ_СоответствияКВР_КОСГУ(Знач ДанныеКВР, ИспользоватьКонвертацию = Истина,  Контрагент = Неопределено)

	Если ИспользоватьКонвертацию Тогда
		Количество = ДанныеКВР.Количество();

		Для Итератор = 1 По Количество Цикл
			ДанныеКВР[Итератор - 1] = Прав(ДанныеКВР[Итератор - 1], 3);
		КонецЦикла;
	КонецЕсли;

	ТаблицаОтбора = Новый ТаблицаЗначений;
	//Прогтехника Мостовая FED-2892 В выписке по 14 л/с ошибки с 23.09.2020
	КС=Новый КвалификаторыСтроки(3);
	ТаблицаОтбора.Колонки.Добавить("КВР", Новый ОписаниеТипов("Строка",,КС));
	//Прогтехника Мостовая FED-2892 В выписке по 14 л/с ошибки с 23.09.2020

КонецФункции

&Вместо("ДополнитьЗагружаемыйОбъект")
Процедура ПРГ_ДополнитьЗагружаемыйОбъект(Объект, Знач ТекстФайлаДанных, РезультатЧтенияФайла = Неопределено, РеквизитыШапкиОбъекта = Неопределено, Задание = Неопределено) Экспорт

	ПВ=ПРГ_ДопСведения.ПолучитьЗначениеДопСведений("ПараметрыТестирования",,Новый Структура("Тест,ВыводитьПротокол,ЗаписыватьВСтатистику",Ложь,Ложь,Ложь));


КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подобрать(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация",Объект.Организация);
	ТекЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подбор данных в %1'"), Объект.Ссылка);
	ПараметрыФормы.Вставить("Заголовок",ТекЗаголовок);
	ПараметрыФормы.Вставить("АдресКонтрагентовВХранилище",ПоместитьКонтрагентовВХранилище());
	ОткрытьФорму("Документ.ПРГ_ИтоговыйРасчётПоДепозитам.Форма.ФормаПодбораКонтрагентовДоговоров",ПараметрыФормы,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТиповыхОпераций

&НаКлиенте
Процедура Подключаемый_ПриНачалеВыбораТиповойОперации(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	БухгалтерскиеОперацииКлиент.ПриНачалеВыбораТиповойОперации(Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
процедура Подключаемый_ПриИзмененииТиповойОперации(Элемент)

	ПодключаемыйСервер_ПриИзмененииТиповойОперации(Элемент.Родитель.Имя);

КонецПроцедуры

&НаСервере
Процедура ПодключаемыйСервер_ПриИзмененииТиповойОперации(ИмяЭлемента)

	БухгалтерскиеОперацииСервер.ПриИзмененииТиповойОперации(ЭтаФорма.Элементы[ИмяЭлемента]);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизита(Элемент)

	БухгалтерскиеОперацииКлиент.ДопРеквизитИзменение(Элемент, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаДополнительнойТабличнойЧасти(Элемент)

	БухгалтерскиеОперацииКлиент.ПриИзмененииРеквизитаДополнительнойТабличнойЧасти(Элемент, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТиповыхОпераций

&НаКлиенте
Процедура Подключаемый_КомандаОткрытьОперацию(Команда)

	БухгалтерскиеОперацииКлиент.КомандаОткрытьОперацию(Объект, Элементы.БухгалтерскаяОперация);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКурсВалюты(Команда)

	БухгалтерскиеОперацииКлиент.ОбновитьКурсВалюты(ЭтаФорма, Объект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправлениеТиповымиОперациями(Команда)

	БухгалтерскиеОперацииКлиент.КомандаУправлениеТиповымиОперациями(ЭтаФорма, Команда);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ДоговорыДепозитаДоговорДепозитаПриИзменении(Элемент)
	ТекЭлементФормы = Элементы.ДоговорыДепозита;
	ТД = ТекЭлементФормы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.ДоговорДепозита) Тогда
		МассивСтрокДопДанных = ТаблицаДоговоры.НайтиСтроки(Новый Структура("ДоговорДепозита",ТД.ДоговорДепозита));
		Если МассивСтрокДопДанных.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТД,МассивСтрокДопДанных[0]);
		Иначе
			ТД.ДоговорДепозита = ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет записей в сводном реестре по данному договору!",,"ДоговорыДепозита["+Число(ТД.НомерСтроки-1)+"].ДоговорДепозита");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорыДепозитаПередНачаломДобавления (Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	 Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыДепозитаПриИзменении (Элемент)
	  Объект.СуммаРазмещенная = Объект.ДоговорыДепозита.Итог("ОбъёмСредств");
	  Объект.СуммаПроцентов = Объект.ДоговорыДепозита.Итог("СуммаПроцентов");
КонецПроцедуры

#КонецОбласти

#Область Служебные

&НаСервере
функция ПоместитьКонтрагентовВХранилище()

	ТаблицаКонтрагентов = Объект.ДоговорыДепозита.Выгрузить(,"Контрагент,ДоговорДепозита");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаКонтрагентов);

КонецФункции

&НаСервере
Процедура ПРГ_СформироватьТаблицу()

	ТаблицаДоговоры.Очистить();
	Запрос = Новый Запрос;
	МассивДоговоры = Объект.ДоговорыДепозита.Выгрузить().ВыгрузитьКолонку("ДоговорДепозита");
	Запрос.УстановитьПараметр("Договоры", МассивДоговоры);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Договоры.Ссылка КАК ДоговорДепозита,
	               |	ПРГ_РеестрДоговоровДепозита.ОбъёмСредств КАК СуммаДепозита,
	               |	Банки.КоррСчет КАК КоррСчет,
	               |	Банки.Код КАК БИК
	               |ИЗ
	               |	Справочник.Договоры КАК Договоры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_РеестрДоговоровДепозита КАК ПРГ_РеестрДоговоровДепозита
	               |		ПО Договоры.Ссылка = ПРГ_РеестрДоговоровДепозита.ДоговорДепозита
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	               |		ПО Договоры.Контрагент = СпрКонтрагенты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	               |			ПО БанковскиеИКазначейскиеСчета.КассовыйОрган = Банки.Ссылка
	               |		ПО Договоры.СчетКонтрагента = БанковскиеИКазначейскиеСчета.Ссылка
	               |ГДЕ
	               |	Договоры.Ссылка В(&Договоры)
	               |	И НЕ Договоры.Ссылка = ЗНАЧЕНИЕ(Справочник.Договоры.ПустаяСсылка)";

	ТаблицаДоговоры.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаКлиенте
Процедура ПРГ_ЗаполнитьДопКолонки()

	Для каждого ТД Из Объект.ДоговорыДепозита Цикл
		МассивСтрокДопДанных = ТаблицаДоговоры.НайтиСтроки(Новый Структура("ДоговорДепозита",ТД.ДоговорДепозита));
		Если МассивСтрокДопДанных.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТД,МассивСтрокДопДанных[0]);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодбораКонтрагентовСервер(Знач ВыбранноеЗначение)

	ТаблицаКонтрагентов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКонтрагентовВХранилище);

	ИсходныеДанные = Объект.ДоговорыДепозита.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("Контрагент,ДоговорДепозита");

	Объект.ДоговорыДепозита.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СтруктураПоиска = Новый Структура("Контрагент,ДоговорДепозита");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТаблицы);
		НайденныеСтроки = ИсходныеДанные.НайтиСтроки(СтруктураПоиска);

		Если НайденныеСтроки.Количество()>0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(Объект.ДоговорыДепозита.Добавить(),НайденнаяСтрока);
			КонецЦикла;
			Продолжить;
		Иначе
			НоваяСтрока = Объект.ДоговорыДепозита.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;
	ПРГ_СформироватьТаблицу();

КонецПроцедуры

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	ОбщегоНазначенияБГУКлиент.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	ОбщегоНазначенияБГУ.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
КонецПроцедуры

#КонецОбласти

#Область Прогтехника
Процедура ПРГ_ИзменитьМенюВводаНаОсновании()

	ПРГ_СтатусМодельСервер.ИзменитьМенюВводаНаОсновании(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПРГ_ПодключаемыйОбработатьКоманду(Команда) Экспорт

	ПРГ_СтатусМодельКлиент.ВыполнитьПодключаемуюКоманду(ЭтаФорма,Объект,Команда);

КонецПроцедуры
#КонецОбласти

#КонецОбласти



