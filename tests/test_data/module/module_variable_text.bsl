&НаКлиенте
Перем ПеренестиВДокумент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	АдресКонтрагентовВХранилище = Параметры.АдресКонтрагентовВХранилище;

	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;

	ЭтаФорма.Заголовок = Параметры.Заголовок;

	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	//	Договоры.Отбор, "ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
	//	ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ТолькоКонтрагент = Ложь;
	Элементы.ТолькоКонтрагент.Видимость = Ложь;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Договоры.Отбор, "Организация", Параметры.Организация,
		ВидСравненияКомпоновкиДанных.Равно,,Истина);

	ОтборАктуальность = "Действующие";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Договоры.Отбор, "ВАрхиве", Ложь);
    ЗагрузитьПереданнуюТабличнуюЧасть(АдресКонтрагентовВХранилище);
	СформироватьИнформационнуюНадпись(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВладелецФормы.Объект.Ссылка) Тогда
		ПозицияВ = Найти(ЭтаФорма.Заголовок," в ");
		ЭтаФорма.Заголовок = Лев(ЭтаФорма.Заголовок,ПозицияВ+2) +""""+ ТипЗнч(ЭтаФорма.ВладелецФормы.Объект.Ссылка)+" от "+ЭтаФорма.ВладелецФормы.Объект.Дата+""" "+Сред(ЭтаФорма.Заголовок,ПозицияВ+3);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		ТекстПредупреждения = ОбщегоНазначенияБГУКлиент.СтандартныйТекстПредупрежденияПриЗавершенииРаботы();
		Отказ = Истина;
		Возврат;
	КонецЕсли;


	Если ПеренестиВДокумент <> Истина И Модифицированность Тогда

		Отказ = Истина;

		ТекстВопроса = НСтр("ru = 'Подобранные данные не перенесены в документ.
			|
			|Перенести?'");

		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Отмена,, КодВозвратаДиалога.Отмена);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;


	Если ПеренестиВДокумент = Истина Тогда
		АдресКонтрагентовВХранилище = ПоместитьКонтрагентовВХранилище();
		Структура = Новый Структура("АдресКонтрагентовВХранилище", АдресКонтрагентовВХранилище);
		ПеренестиВДокумент = Истина;
		ОповеститьОВыборе(Структура);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Элементы.ГруппаДоговоров.Видимость = НЕ ТолькоКонтрагент;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ПрименитьПоиск();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;

	КоличествоНайденных = 0;
	Для каждого ЭлементСписка Из ИсторияПоиска Цикл
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			КоличествоНайденных = КоличествоНайденных + 1;
			Если КоличествоНайденных > 7 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьПоиск();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ОтборАктуальностьПриИзменении(Элемент)

	ОтборИспользование = (ОтборАктуальность = "Действующие" ИЛИ ОтборАктуальность = "ВАрхиве");
	ОтборЗначение = ?(ОтборАктуальность = "Действующие", Ложь, Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Договоры.Отбор, "ВАрхиве", ОтборЗначение, , , ОтборИспользование);

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидКонтрагентаПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Контрагенты.Отбор, "ВидКонтрагента", ОтборВидКонтрагента, , , ЗначениеЗаполнено(ОтборВидКонтрагента));

КонецПроцедуры

&НаКлиенте
Процедура ТолькоКонтрагентПриИзменении(Элемент)

	Элементы.ГруппаДоговоров.Видимость = НЕ ТолькоКонтрагент;

	Если НЕ ТолькоКонтрагент Тогда
		УстановитьОтборПоКонтрагенту();
	Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Договоры.Отбор, "Контрагент", Неопределено,
			ВидСравненияКомпоновкиДанных.НеЗаполнено,,Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияКонтрагентов

&НаКлиенте
Процедура ИерархияКонтрагентовПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("УстановитьОтборПоИерархииКонтрагентов",0.3,Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)

	//ПодключитьОбработчикОжидания("УстановитьОтборПоКонтрагенту",0.1,Истина);
	УстановитьОтборПоКонтрагенту();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ТолькоКонтрагент Тогда
		ТекДоговор = ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
	Иначе
		ТекДоговор = Элементы.Договоры.ТекущаяСтрока;
	КонецЕсли;
	ОбработатьВыборКонтрагентаДоговора(ВыбраннаяСтрока,ТекДоговор);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ТолькоКонтрагент Тогда
		ТекДоговор = ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
	Иначе
		ТекДоговор = Элементы.Договоры.ТекущаяСтрока;
	КонецЕсли;
	ОбработатьВыборКонтрагентаДоговора(Значение,ТекДоговор);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоговоры

&НаКлиенте
Процедура ДоговорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
		ОбработатьВыборКонтрагентаДоговора(ТекКонтрагент,ВыбраннаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
		ОбработатьВыборКонтрагентаДоговора(ТекКонтрагент,Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобранныеДанные

&НаКлиенте
Процедура ПодобранныеДанныеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
	СформироватьИнформационнуюНадпись(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоместитьКонтрагентовВХранилище()

	ТаблицаКонтрагентов = ПодобранныеДанные.Выгрузить();

	АдресКонтрагентовВХранилище = ПоместитьВоВременноеХранилище(ТаблицаКонтрагентов, УникальныйИдентификатор);

	Возврат АдресКонтрагентовВХранилище;

КонецФункции

&НаСервере
Процедура ЗагрузитьПереданнуюТабличнуюЧасть(АдресКонтрагентовВХранилище)

	Если ЭтоАдресВременногоХранилища(АдресКонтрагентовВХранилище) Тогда
		ТаблицаКонтрагентов = ПолучитьИзВременногоХранилища(АдресКонтрагентовВХранилище);
		ТаблицаКонтрагентов.Свернуть("Контрагент,ДоговорДепозита");
		ПодобранныеДанные.Загрузить(ТаблицаКонтрагентов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()

	Использование = ЗначениеЗаполнено(СтрокаПоиска);

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Контрагенты.Отбор.Элементы, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора, "Контрагент.Наименование", СтрокаПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,,Использование);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора, "Контрагент.НаименованиеСокращенное", СтрокаПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,,Использование);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора, "Контрагент.Код", СтрокаПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,,Использование);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора, "Контрагент.ИНН", СтрокаПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,,Использование);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбора, "Контрагент.КПП", СтрокаПоиска,
		ВидСравненияКомпоновкиДанных.Содержит,,Использование);

	// Удалим элемент из истории поиска если он там был
	НомерНайденногоЭлементаСписка = ИсторияПоиска.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		ИсторияПоиска.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = ИсторияПоиска.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;

	// И поставим его на первое место
	ИсторияПоиска.Вставить(0, СтрокаПоиска);
	Пока ИсторияПоиска.Количество() > 1000 Цикл
		ИсторияПоиска.Удалить(ИсторияПоиска.Количество() - 1);
	КонецЦикла;


КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск()

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Контрагенты.Отбор,, "ПоискПоПодстроке");

КонецПроцедуры // ОчиститьПоиск()

&НаКлиенте
Процедура УстановитьОтборПоКонтрагенту()

	ОтборПоКонтрагенту = Элементы.Контрагенты.ТекущаяСтрока;

	Если ЗначениеЗаполнено(ОтборПоКонтрагенту) И НЕ ТолькоКонтрагент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Договоры.Отбор, "Контрагент", ОтборПоКонтрагенту,
			ВидСравненияКомпоновкиДанных.Равно,,Истина);
	Иначе
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Договоры.Отбор, "Контрагент", Неопределено,
			ВидСравненияКомпоновкиДанных.НеЗаполнено,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииКонтрагентов()

	ОтборПоИерархии = Элементы.ИерархияКонтрагентов.ТекущаяСтрока;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Контрагенты.Отбор, "Контрагент", ОтборПоИерархии,
		ВидСравненияКомпоновкиДанных.ВИерархии,,ЗначениеЗаполнено(ОтборПоИерархии));

	УстановитьОтборПоКонтрагенту();

КонецПроцедуры

&НаКлиенте
Процедура ИерархияКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииКонтрагентов();
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборКонтрагентаДоговора(Контрагент,Договор)

	Если ПодобранныеДанные.НайтиСтроки(Новый Структура("Контрагент,ДоговорДепозита",Контрагент,Договор)).Количество() = 0 Тогда
		НовСтр = ПодобранныеДанные.Добавить();
		НовСтр.Контрагент = Контрагент;
		НовСтр.ДоговорДепозита = Договор;
		Модифицированность = Истина;
		СформироватьИнформационнуюНадпись(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформационнуюНадпись(Форма)

	ШаблонНадписи = НСтр("ru = 'Всего подобрано: %1'");
	Количество = Форма.ПодобранныеДанные.Количество();

	Форма.ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Всего подобрано: %1'"),
									СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
																	Количество, НСтр("ru = 'позиция,позиции,позиций'")));

КонецПроцедуры

#КонецОбласти
